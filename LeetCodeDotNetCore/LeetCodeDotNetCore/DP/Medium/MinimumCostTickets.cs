using System;
namespace LeetCodeDotNetCore.DP.Medium
{
    /*
     * 在一个火车旅行很受欢迎的国度，你提前一年计划了一些火车旅行。在接下来的一年里，你要旅行的日子将以一个名为 days 的数组给出。每一项是一个从 1 到 365 的整数。

    火车票有三种不同的销售方式：

    一张为期一天的通行证售价为 costs[0] 美元；
    一张为期七天的通行证售价为 costs[1] 美元；
    一张为期三十天的通行证售价为 costs[2] 美元。
    通行证允许数天无限制的旅行。 例如，如果我们在第 2 天获得一张为期 7 天的通行证，那么我们可以连着旅行 7 天：第 2 天、第 3 天、第 4 天、第 5 天、第 6 天、第 7 天和第 8 天。

    返回你想要完成在给定的列表 days 中列出的每一天的旅行所需要的最低消费。

 

    示例 1：

    输入：days = [1,4,6,7,8,20], costs = [2,7,15]
    输出：11
    解释： 
    例如，这里有一种购买通行证的方法，可以让你完成你的旅行计划：
    在第 1 天，你花了 costs[0] = $2 买了一张为期 1 天的通行证，它将在第 1 天生效。
    在第 3 天，你花了 costs[1] = $7 买了一张为期 7 天的通行证，它将在第 3, 4, ..., 9 天生效。
    在第 20 天，你花了 costs[0] = $2 买了一张为期 1 天的通行证，它将在第 20 天生效。
    你总共花了 $11，并完成了你计划的每一天旅行。
    示例 2：

    输入：days = [1,2,3,4,5,6,7,8,9,10,30,31], costs = [2,7,15]
    输出：17
    解释：
    例如，这里有一种购买通行证的方法，可以让你完成你的旅行计划： 
    在第 1 天，你花了 costs[2] = $15 买了一张为期 30 天的通行证，它将在第 1, 2, ..., 30 天生效。
    在第 31 天，你花了 costs[0] = $2 买了一张为期 1 天的通行证，它将在第 31 天生效。 
    你总共花了 $17，并完成了你计划的每一天旅行。
 

    提示：

    1 <= days.length <= 365
    1 <= days[i] <= 365
    days 按顺序严格递增
    costs.length == 3
    1 <= costs[i] <= 1000
     */
    public class MinimumCostTickets
    {
        public int Solution (int[] days, int[] costs)
        {
            if (days.Length == 1) return costs[0];
            var len = days.Length;
            //最后一天要出行的日子
            var maxDay = days[len - 1];
            //第一天要出行的日子
            var minDay = days[0];
            //因为会算到30天后的费用，所以dp长度需要加上31
            var dp = new int[maxDay + 31];
            //d是从最后一天出行遍历到第一天出行的日子，其中每一天都要遍历到
            //i是days的索引
            for (int d = maxDay, i = len - 1; d >= minDay; d--)
            {
                //如果这一天是需要出行的
                if (d == days[i])
                {
                    //dp方程
                    //dp[d] = min(c[0]+包一天费用，c[1]+包7天费用，c[2]+包30天费用)
                    dp[d] = Math.Min(costs[0] + dp[d + 1], Math.Min(costs[1] + dp[d + 7], costs[2] + dp[d + 30]));
                    //出行后将days索引向左移动一位
                    i--;
                }
                //如果这一天不需要出行
                else
                {
                    //那么这一天的费用等于后一天
                    dp[d] = dp[d + 1];
                }
            }
            return dp[minDay];
        }
    }
}
